{"ast":null,"code":"'use strict';\n\nimport { useRef } from 'react';\nimport { useSharedValue } from \"./useSharedValue\";\nimport { getShadowNodeWrapperFromRef } from \"../fabricUtils\";\nimport { makeShareableCloneRecursive } from \"../shareables\";\nimport { shareableMappingCache } from \"../shareableMappingCache\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { isFabric, isWeb } from \"../PlatformChecker\";\nvar IS_FABRIC = isFabric();\nvar IS_WEB = isWeb();\nfunction getComponentOrScrollable(component) {\n  if (IS_FABRIC && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!IS_FABRIC && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\nvar getTagValueFunction = IS_FABRIC ? getShadowNodeWrapperFromRef : findNodeHandle;\nexport function useAnimatedRef() {\n  var tag = useSharedValue(-1);\n  var viewName = useSharedValue(null);\n  var ref = useRef();\n  if (!ref.current) {\n    var fun = function fun(component) {\n      if (component) {\n        tag.value = IS_WEB ? getComponentOrScrollable(component) : getTagValueFunction(getComponentOrScrollable(component));\n        fun.current = component;\n        if (Platform.OS === 'ios' && !IS_FABRIC) {\n          var _viewConfig;\n          viewName.value = (component === null || component === void 0 ? void 0 : (_viewConfig = component.viewConfig) === null || _viewConfig === void 0 ? void 0 : _viewConfig.uiViewClassName) || 'RCTView';\n        }\n      }\n      return tag.value;\n    };\n    fun.current = null;\n    var animatedRefShareableHandle = makeShareableCloneRecursive({\n      __init: function __init() {\n        'worklet';\n\n        var f = function f() {\n          return tag.value;\n        };\n        f.viewName = viewName;\n        return f;\n      }\n    });\n    shareableMappingCache.set(fun, animatedRefShareableHandle);\n    ref.current = fun;\n  }\n  return ref.current;\n}","map":{"version":3,"names":["useRef","useSharedValue","getShadowNodeWrapperFromRef","makeShareableCloneRecursive","shareableMappingCache","Platform","findNodeHandle","isFabric","isWeb","IS_FABRIC","IS_WEB","getComponentOrScrollable","component","getNativeScrollRef","getScrollableNode","getTagValueFunction","useAnimatedRef","tag","viewName","ref","current","fun","value","OS","_viewConfig","viewConfig","uiViewClassName","animatedRefShareableHandle","__init","f","set"],"sources":["C:\\Users\\kauan\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useAnimatedRef.ts"],"sourcesContent":["'use strict';\nimport type { Component } from 'react';\nimport { useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedRef, AnimatedRefOnUI } from './commonTypes';\nimport type { ShadowNodeWrapper } from '../commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { makeShareableCloneRecursive } from '../shareables';\nimport { shareableMappingCache } from '../shareableMappingCache';\nimport { Platform, findNodeHandle } from 'react-native';\nimport type { ScrollView, FlatList } from 'react-native';\nimport { isFabric, isWeb } from '../PlatformChecker';\n\nconst IS_FABRIC = isFabric();\nconst IS_WEB = isWeb();\n\ninterface MaybeScrollableComponent extends Component {\n  getNativeScrollRef?: FlatList['getNativeScrollRef'];\n  getScrollableNode?:\n    | ScrollView['getScrollableNode']\n    | FlatList['getScrollableNode'];\n  viewConfig?: {\n    uiViewClassName?: string;\n  };\n}\n\nfunction getComponentOrScrollable(component: MaybeScrollableComponent) {\n  if (IS_FABRIC && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!IS_FABRIC && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\n\nconst getTagValueFunction = IS_FABRIC\n  ? getShadowNodeWrapperFromRef\n  : findNodeHandle;\n\n/**\n * Lets you get a reference of a view that you can use inside a worklet.\n *\n * @returns An object with a `.current` property which contains an instance of a component.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef\n */\nexport function useAnimatedRef<\n  TComponent extends Component\n>(): AnimatedRef<TComponent> {\n  const tag = useSharedValue<number | ShadowNodeWrapper | null>(-1);\n  const viewName = useSharedValue<string | null>(null);\n\n  const ref = useRef<AnimatedRef<TComponent>>();\n\n  if (!ref.current) {\n    const fun: AnimatedRef<TComponent> = <AnimatedRef<TComponent>>((\n      component\n    ) => {\n      // enters when ref is set by attaching to a component\n      if (component) {\n        tag.value = IS_WEB\n          ? getComponentOrScrollable(component)\n          : getTagValueFunction(getComponentOrScrollable(component));\n        fun.current = component;\n        // viewName is required only on iOS with Paper\n        if (Platform.OS === 'ios' && !IS_FABRIC) {\n          viewName.value =\n            (component as MaybeScrollableComponent)?.viewConfig\n              ?.uiViewClassName || 'RCTView';\n        }\n      }\n      return tag.value;\n    });\n\n    fun.current = null;\n\n    const animatedRefShareableHandle = makeShareableCloneRecursive({\n      __init: () => {\n        'worklet';\n        const f: AnimatedRefOnUI = () => tag.value;\n        f.viewName = viewName;\n        return f;\n      },\n    });\n    shareableMappingCache.set(fun, animatedRefShareableHandle);\n    ref.current = fun;\n  }\n\n  return ref.current;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,cAAc;AAGvB,SAASC,2BAA2B;AACpC,SAASC,2BAA2B;AACpC,SAASC,qBAAqB;AAAkC,OAAAC,QAAA;AAAA,OAAAC,cAAA;AAGhE,SAASC,QAAQ,EAAEC,KAAK;AAExB,IAAMC,SAAS,GAAGF,QAAQ,EAAE;AAC5B,IAAMG,MAAM,GAAGF,KAAK,EAAE;AAYtB,SAASG,wBAAwBA,CAACC,SAAmC,EAAE;EACrE,IAAIH,SAAS,IAAIG,SAAS,CAACC,kBAAkB,EAAE;IAC7C,OAAOD,SAAS,CAACC,kBAAkB,EAAE;EACvC,CAAC,MAAM,IAAI,CAACJ,SAAS,IAAIG,SAAS,CAACE,iBAAiB,EAAE;IACpD,OAAOF,SAAS,CAACE,iBAAiB,EAAE;EACtC;EACA,OAAOF,SAAS;AAClB;AAEA,IAAMG,mBAAmB,GAAGN,SAAS,GACjCP,2BAA2B,GAC3BI,cAAc;AAQlB,OAAO,SAASU,cAAcA,CAAA,EAED;EAC3B,IAAMC,GAAG,GAAGhB,cAAc,CAAoC,CAAC,CAAC,CAAC;EACjE,IAAMiB,QAAQ,GAAGjB,cAAc,CAAgB,IAAI,CAAC;EAEpD,IAAMkB,GAAG,GAAGnB,MAAM,EAA2B;EAE7C,IAAI,CAACmB,GAAG,CAACC,OAAO,EAAE;IAChB,IAAMC,GAA4B,GAChC,SADIA,GAA4BA,CAChCT,SAAS,EACN;MAEH,IAAIA,SAAS,EAAE;QACbK,GAAG,CAACK,KAAK,GAAGZ,MAAM,GACdC,wBAAwB,CAACC,SAAS,CAAC,GACnCG,mBAAmB,CAACJ,wBAAwB,CAACC,SAAS,CAAC,CAAC;QAC5DS,GAAG,CAACD,OAAO,GAAGR,SAAS;QAEvB,IAAIP,QAAQ,CAACkB,EAAE,KAAK,KAAK,IAAI,CAACd,SAAS,EAAE;UAAA,IAAAe,WAAA;UACvCN,QAAQ,CAACI,KAAK,GACZ,CAACV,SAAS,aAATA,SAAS,wBAAAY,WAAA,GAATZ,SAAS,CAA+Ba,UAAU,cAAAD,WAAA,uBAAnDA,WAAA,CACIE,eAAe,KAAI,SAAS;QACpC;MACF;MACA,OAAOT,GAAG,CAACK,KAAK;IAClB,CAAE;IAEFD,GAAG,CAACD,OAAO,GAAG,IAAI;IAElB,IAAMO,0BAA0B,GAAGxB,2BAA2B,CAAC;MAC7DyB,MAAM,EAAE,SAAAA,OAAA,EAAM;QACZ,SAAS;;QACT,IAAMC,CAAkB,GAAG,SAArBA,CAAkBA,CAAA;UAAA,OAASZ,GAAG,CAACK,KAAK;QAAA;QAC1CO,CAAC,CAACX,QAAQ,GAAGA,QAAQ;QACrB,OAAOW,CAAC;MACV;IACF,CAAC,CAAC;IACFzB,qBAAqB,CAAC0B,GAAG,CAACT,GAAG,EAAEM,0BAA0B,CAAC;IAC1DR,GAAG,CAACC,OAAO,GAAGC,GAAG;EACnB;EAEA,OAAOF,GAAG,CAACC,OAAO;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}