{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef } from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { useEvent } from \"./useEvent\";\nimport { useSharedValue } from \"./useSharedValue\";\nimport { isWeb } from \"../PlatformChecker\";\nvar IS_WEB = isWeb();\nvar scrollEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];\nexport function useScrollViewOffset(animatedRef, initialRef) {\n  var offsetRef = useRef(initialRef !== undefined ? initialRef : useSharedValue(0));\n  var eventHandler = useEvent(function (event) {\n    'worklet';\n\n    offsetRef.current.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n  }, scrollEventNames);\n  useEffect(function () {\n    var component = animatedRef.current;\n    var viewTag = IS_WEB ? component : findNodeHandle(component);\n    eventHandler.workletEventHandler.registerForEvents(viewTag);\n    return function () {\n      var _eventHandler$worklet;\n      (_eventHandler$worklet = eventHandler.workletEventHandler) === null || _eventHandler$worklet === void 0 ? void 0 : _eventHandler$worklet.unregisterFromEvents();\n    };\n  }, [animatedRef, animatedRef.current, eventHandler]);\n  return offsetRef.current;\n}","map":{"version":3,"names":["useEffect","useRef","findNodeHandle","useEvent","useSharedValue","isWeb","IS_WEB","scrollEventNames","useScrollViewOffset","animatedRef","initialRef","offsetRef","undefined","eventHandler","event","current","value","contentOffset","x","y","component","viewTag","workletEventHandler","registerForEvents","_eventHandler$worklet","unregisterFromEvents"],"sources":["C:\\Users\\kauan\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useScrollViewOffset.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport type { SharedValue } from '../commonTypes';\nimport { findNodeHandle } from 'react-native';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedScrollView } from '../component/ScrollView';\nimport type {\n  AnimatedRef,\n  RNNativeScrollEvent,\n  ReanimatedScrollEvent,\n} from './commonTypes';\nimport { isWeb } from '../PlatformChecker';\n\nconst IS_WEB = isWeb();\n\nconst scrollEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n\n/**\n * Lets you synchronously get the current offset of a `ScrollView`.\n *\n * @param animatedRef - An [animated ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef) attached to an Animated.ScrollView component.\n * @returns A shared value which holds the current offset of the `ScrollView`.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset\n */\nexport function useScrollViewOffset(\n  animatedRef: AnimatedRef<AnimatedScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number> {\n  const offsetRef = useRef(\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    initialRef !== undefined ? initialRef : useSharedValue(0)\n  );\n\n  const eventHandler = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offsetRef.current.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    scrollEventNames\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    const component = animatedRef.current;\n    const viewTag = IS_WEB ? component : findNodeHandle(component);\n\n    eventHandler.workletEventHandler.registerForEvents(viewTag as number);\n\n    return () => {\n      eventHandler.workletEventHandler?.unregisterFromEvents();\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef.current, eventHandler]);\n\n  return offsetRef.current;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAA,OAAAC,cAAA;AAIzC,SAASC,QAAQ;AACjB,SAASC,cAAc;AAOvB,SAASC,KAAK;AAEd,IAAMC,MAAM,GAAGD,KAAK,EAAE;AAEtB,IAAME,gBAAgB,GAAG,CACvB,UAAU,EACV,mBAAmB,EACnB,iBAAiB,EACjB,uBAAuB,EACvB,qBAAqB,CACtB;AASD,OAAO,SAASC,mBAAmBA,CACjCC,WAA4C,EAC5CC,UAAgC,EACX;EACrB,IAAMC,SAAS,GAAGV,MAAM,CAEtBS,UAAU,KAAKE,SAAS,GAAGF,UAAU,GAAGN,cAAc,CAAC,CAAC,CAAC,CAC1D;EAED,IAAMS,YAAY,GAAGV,QAAQ,CAC1B,UAAAW,KAA4B,EAAK;IAChC,SAAS;;IACTH,SAAS,CAACI,OAAO,CAACC,KAAK,GACrBF,KAAK,CAACG,aAAa,CAACC,CAAC,KAAK,CAAC,GACvBJ,KAAK,CAACG,aAAa,CAACE,CAAC,GACrBL,KAAK,CAACG,aAAa,CAACC,CAAC;EAC7B,CAAC,EACDX,gBAEA,CACyD;EAE3DP,SAAS,CAAC,YAAM;IACd,IAAMoB,SAAS,GAAGX,WAAW,CAACM,OAAO;IACrC,IAAMM,OAAO,GAAGf,MAAM,GAAGc,SAAS,GAAGlB,cAAc,CAACkB,SAAS,CAAC;IAE9DP,YAAY,CAACS,mBAAmB,CAACC,iBAAiB,CAACF,OAAO,CAAW;IAErE,OAAO,YAAM;MAAA,IAAAG,qBAAA;MACX,CAAAA,qBAAA,GAAAX,YAAY,CAACS,mBAAmB,cAAAE,qBAAA,uBAAhCA,qBAAA,CAAkCC,oBAAoB,EAAE;IAC1D,CAAC;EAKH,CAAC,EAAE,CAAChB,WAAW,EAAEA,WAAW,CAACM,OAAO,EAAEF,YAAY,CAAC,CAAC;EAEpD,OAAOF,SAAS,CAACI,OAAO;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}