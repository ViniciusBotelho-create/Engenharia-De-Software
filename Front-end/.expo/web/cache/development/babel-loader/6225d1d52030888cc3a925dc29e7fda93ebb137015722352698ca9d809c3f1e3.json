{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar ImageResizerAndroid = NativeModules.ImageResizerAndroid;\nvar exportObject = {};\nfunction validateOptions(options) {\n  var mode = options.mode || 'contain';\n  var possibleModes = ['contain', 'cover', 'stretch'];\n  if (possibleModes.indexOf(mode) === -1) {\n    throw new Error(`createResizedImage's options.mode must be one of \"${possibleModes.join('\", \"')}\"`);\n  }\n  if (options.onlyScaleDown && typeof options.onlyScaleDown !== 'boolean') {\n    throw new Error(`createResizedImage\\'s option.onlyScaleDown must be a boolean: got ${options.onlyScaleDown}`);\n  }\n  return {\n    mode: mode,\n    onlyScaleDown: !!options.onlyScaleDown\n  };\n}\nif (Platform.OS === 'android') {\n  exportObject = {\n    createResizedImage: function createResizedImage(imagePath, newWidth, newHeight, compressFormat, quality) {\n      var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var outputPath = arguments.length > 6 ? arguments[6] : undefined;\n      var keepMeta = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      var options = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n      var validatedOptions = validateOptions(options);\n      return new Promise(function (resolve, reject) {\n        ImageResizerAndroid.createResizedImage(imagePath, newWidth, newHeight, compressFormat, quality, rotation, outputPath, keepMeta, validatedOptions, resolve, reject);\n      });\n    }\n  };\n} else {\n  exportObject = {\n    createResizedImage: function createResizedImage(path, width, height, format, quality) {\n      var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var outputPath = arguments.length > 6 ? arguments[6] : undefined;\n      var keepMeta = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      var options = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n      if (format !== 'JPEG' && format !== 'PNG') {\n        throw new Error('Only JPEG and PNG format are supported by createResizedImage');\n      }\n      var validatedOptions = validateOptions(options);\n      return new Promise(function (resolve, reject) {\n        NativeModules.ImageResizer.createResizedImage(path, width, height, format, quality, rotation, outputPath, keepMeta, validatedOptions, function (err, response) {\n          if (err) {\n            return reject(err);\n          }\n          resolve(response);\n        });\n      });\n    }\n  };\n}\nexport default exportObject;","map":{"version":3,"names":["ImageResizerAndroid","NativeModules","exportObject","validateOptions","options","mode","possibleModes","indexOf","Error","join","onlyScaleDown","Platform","OS","createResizedImage","imagePath","newWidth","newHeight","compressFormat","quality","rotation","arguments","length","undefined","outputPath","keepMeta","validatedOptions","Promise","resolve","reject","path","width","height","format","ImageResizer","err","response"],"sources":["C:/Users/kauan/florasentinel/node_modules/react-native-image-resizer/index.js"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst ImageResizerAndroid = NativeModules.ImageResizerAndroid;\n\nlet exportObject = {};\n\n/** Validate `options` object: used by both Android and iOS entry points */\nfunction validateOptions(options) {\n  const mode = options.mode || 'contain';\n  const possibleModes = ['contain', 'cover', 'stretch'];\n  if (possibleModes.indexOf(mode) === -1) {\n    throw new Error(`createResizedImage's options.mode must be one of \"${possibleModes.join('\", \"')}\"`);\n  }\n\n  if (options.onlyScaleDown && typeof options.onlyScaleDown !== 'boolean') {\n    throw new Error(`createResizedImage\\'s option.onlyScaleDown must be a boolean: got ${options.onlyScaleDown}`);\n  }\n\n  return {\n    mode,\n    onlyScaleDown: !!options.onlyScaleDown,\n  };\n}\n\nif (Platform.OS === 'android') {\n  exportObject = {\n    createResizedImage: (\n      imagePath,\n      newWidth,\n      newHeight,\n      compressFormat,\n      quality,\n      rotation = 0,\n      outputPath,\n      keepMeta = false,\n      options = {}\n    ) => {\n      const validatedOptions = validateOptions(options);\n  \n      return new Promise((resolve, reject) => {\n        ImageResizerAndroid.createResizedImage(\n          imagePath,\n          newWidth,\n          newHeight,\n          compressFormat,\n          quality,\n          rotation,\n          outputPath,\n          keepMeta,\n          validatedOptions,\n          resolve,\n          reject\n        );\n      });\n    },\n  };\n} else {\n  exportObject = {\n    createResizedImage: (\n      path,\n      width,\n      height,\n      format,\n      quality,\n      rotation = 0,\n      outputPath,\n      keepMeta = false,\n      options = {}\n    ) => {\n      if (format !== 'JPEG' && format !== 'PNG') {\n        throw new Error('Only JPEG and PNG format are supported by createResizedImage');\n      }\n  \n      const validatedOptions = validateOptions(options);\n  \n      return new Promise((resolve, reject) => {\n        NativeModules.ImageResizer.createResizedImage(\n          path,\n          width,\n          height,\n          format,\n          quality,\n          rotation,\n          outputPath,\n          keepMeta,\n          validatedOptions,\n          (err, response) => {\n            if (err) {\n              return reject(err);\n            }\n  \n            resolve(response);\n          }\n        );\n      });\n    },\n  };\n}\n\nexport default exportObject;\n"],"mappings":";;AAEA,IAAMA,mBAAmB,GAAGC,aAAa,CAACD,mBAAmB;AAE7D,IAAIE,YAAY,GAAG,CAAC,CAAC;AAGrB,SAASC,eAAeA,CAACC,OAAO,EAAE;EAChC,IAAMC,IAAI,GAAGD,OAAO,CAACC,IAAI,IAAI,SAAS;EACtC,IAAMC,aAAa,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,CAAC;EACrD,IAAIA,aAAa,CAACC,OAAO,CAACF,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IACtC,MAAM,IAAIG,KAAK,CAAE,qDAAoDF,aAAa,CAACG,IAAI,CAAC,MAAM,CAAE,GAAE,CAAC;EACrG;EAEA,IAAIL,OAAO,CAACM,aAAa,IAAI,OAAON,OAAO,CAACM,aAAa,KAAK,SAAS,EAAE;IACvE,MAAM,IAAIF,KAAK,CAAE,qEAAoEJ,OAAO,CAACM,aAAc,EAAC,CAAC;EAC/G;EAEA,OAAO;IACLL,IAAI,EAAJA,IAAI;IACJK,aAAa,EAAE,CAAC,CAACN,OAAO,CAACM;EAC3B,CAAC;AACH;AAEA,IAAIC,QAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;EAC7BV,YAAY,GAAG;IACbW,kBAAkB,EAAE,SAAAA,mBAClBC,SAAS,EACTC,QAAQ,EACRC,SAAS,EACTC,cAAc,EACdC,OAAO,EAKJ;MAAA,IAJHC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IACZG,UAAU,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAAA,IACVE,QAAQ,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MAAA,IAChBhB,OAAO,GAAAgB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MAEZ,IAAMK,gBAAgB,GAAGtB,eAAe,CAACC,OAAO,CAAC;MAEjD,OAAO,IAAIsB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtC5B,mBAAmB,CAACa,kBAAkB,CACpCC,SAAS,EACTC,QAAQ,EACRC,SAAS,EACTC,cAAc,EACdC,OAAO,EACPC,QAAQ,EACRI,UAAU,EACVC,QAAQ,EACRC,gBAAgB,EAChBE,OAAO,EACPC,MACF,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC,MAAM;EACL1B,YAAY,GAAG;IACbW,kBAAkB,EAAE,SAAAA,mBAClBgB,IAAI,EACJC,KAAK,EACLC,MAAM,EACNC,MAAM,EACNd,OAAO,EAKJ;MAAA,IAJHC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IACZG,UAAU,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAAA,IACVE,QAAQ,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MAAA,IAChBhB,OAAO,GAAAgB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MAEZ,IAAIY,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,KAAK,EAAE;QACzC,MAAM,IAAIxB,KAAK,CAAC,8DAA8D,CAAC;MACjF;MAEA,IAAMiB,gBAAgB,GAAGtB,eAAe,CAACC,OAAO,CAAC;MAEjD,OAAO,IAAIsB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtC3B,aAAa,CAACgC,YAAY,CAACpB,kBAAkB,CAC3CgB,IAAI,EACJC,KAAK,EACLC,MAAM,EACNC,MAAM,EACNd,OAAO,EACPC,QAAQ,EACRI,UAAU,EACVC,QAAQ,EACRC,gBAAgB,EAChB,UAACS,GAAG,EAAEC,QAAQ,EAAK;UACjB,IAAID,GAAG,EAAE;YACP,OAAON,MAAM,CAACM,GAAG,CAAC;UACpB;UAEAP,OAAO,CAACQ,QAAQ,CAAC;QACnB,CACF,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC;AACH;AAEA,eAAejC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}